The ``base_geometry`` module
======================
Using ``BaseGeometry`` into ``base_geometry``
----------------------------------

Import step:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Validating in a correct way:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("Number", 12)

zero or negative number:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("Number", 0)
    Traceback (most recent call last):
    ValueError: Number must be greater than 0

Passed two string through integer_validator:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("Number", "two")
    Traceback (most recent call last):
    TypeError: Number must be an integer

One argument to integer_validator:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("Number")
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

One argument to integer_validator:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator(, 2)
    Traceback (most recent call last):
    SyntaxError: invalid syntax

No arguments to integer_validator:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

BaseGeometry area methods:
    >>> bg = BaseGeometry()
    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

Arguments to area methods:
    >>> bg = BaseGeometry()
    >>> bg.area(12)
    Traceback (most recent call last):
    TypeError: area() takes 1 positional argument but 2 were given



    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)

    >>> try:
    ...     bg.integer_validator("name", "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    >>> try:
    ...     bg.integer_validator("name", -1)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] name must be greater than 0